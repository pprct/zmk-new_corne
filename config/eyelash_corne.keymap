#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESCAPE      &kp Q  &kp W  &kp E         &kp R      &kp T                                   &kp UP                &kp Y      &kp U      &kp I          &kp O    &kp P     &kp MINUS
&mo 2           &kp A  &kp S  &kp D         &kp F      &kp G                         &kp LEFT  &kp ENTER  &kp RIGHT  &kp H      &kp J      &kp K          &kp L    &kp SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C         &kp V      &kp B            &kp SPACE              &kp DOWN              &kp N      &kp M      &kp COMMA      &kp DOT  &kp FSLH  &kp BACKSLASH
                              &kp LEFT_ALT  &kp LCTRL  &lt 1 BACKSPACE                                               &kp SPACE  &kp ENTER  &kp RIGHT_WIN
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&kp GRAVE  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5                                &mmv MOVE_UP                     &kp F6           &kp F7  &kp F8         &kp F9  &kp F10  &kp BACKSPACE
&trans     &kp N1   &kp N2   &kp N3  &kp N4  &kp N5                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp N6           &kp N7  &kp N8         &kp N9  &kp N0   &kp MINUS
&trans     &kp F11  &kp F12  &trans  &trans  &trans  &kp C_MUTE                    &mmv MOVE_DOWN                   &rgb_ug RGB_EFR  &trans  &trans         &trans  &trans   &kp EQUAL
                             &trans  &trans  &trans                                                                 &trans           &trans  &kp BACKSPACE
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        Function {
            bindings = <
&trans  &kp C_PREV       &kp C_PP         &kp C_NEXT       &trans  &trans                                 &trans          &trans  &kp PG_UP  &kp UP    &kp PG_DN  &kp PRINTSCREEN  &kp INSERT
&trans  &kp C_VOL_DN     &kp C_MUTE       &kp C_VOLUME_UP  &trans  &trans                         &trans  &trans  &trans  &trans  &kp LEFT   &kp DOWN  &kp RIGHT  &trans           &trans
&trans  &rgb_ug RGB_EFF  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &trans  &trans      &rgb_ug RGB_TOG            &trans          &trans  &trans     &trans    &trans     &trans           &mo 3
                                          &trans           &trans  &kp DELETE                                             &trans  &trans     &trans
            >;

            sensor-bindings = <&rgb_encoder>;
        };

        layer_3 {
            bindings = <
&trans  &trans        &trans        &trans        &trans  &trans                            &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 3  &trans  &bt BT_CLR_ALL            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans  &trans          &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans        &trans  &trans                                            &trans  &trans  &trans
            >;
        };
    };
};
